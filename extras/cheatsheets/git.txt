--------------- Setting up repo origins ------------------------
If it's a repo that's not across work+personal, then:
remember to set git remote as SSH remotes, not as HTTPS remotes, so it doesnt ask you for
a username and password. Example:
git remote add origin git@github.com:davedss/whateverrepo.git
However if it's a personal repo (this this one) that's on your work comp too, set it up as an HTTPS
origin so that you can push to it with your personal token.

--------------- Sensitive Info ----------------------------------
If you're worried that you may have committed some sensitive info to a git repository, 
like an API key or a password etc, you can search the *content* of all commits to find it:

git grep <regexp> $(git rev-list --all)

eg:
git grep 'password123' $(git rev-list --all)

---------------- Normal Commands --------------------------------
git show <hash>                      show the changes that happened on a specific commit
git merge <branchname>               merge into current branch (switch to recv. branch 1st!)
git log -p                           show the logs AND the changes made with each commit
git whatchanged <hash>               show what changed in a specific commit
git branch <branchname>              create a branch (remember to check it out to switch to it after)
git branch -d <branchname>           delete a branch
git push                             when you're on a branch that is new on your local, you can use this
                                     to get the git command to setup the branch on the remote.
git switch -c <new-branch>           Move existing, uncommitted work to a new branch

--------------- Set up multiple Git Accounts on a Computer ---------------------
If for example you want to setup your work machine so that the default for the machine is your dave@work.com account, 
but for the dotf/ directory you want to use your personal 'tamerobots' account, then do the following:
1. install the dotfiles as normal
2. rename the .gitconfig-example to .gitconfig and put your dave@work account in it (remember the 'user' line at the bottom)
3. from within the /dotf/ directory, enter the following commands to set that directory to use a different git user:

git config user.name "TameRobots"
git config user.email dave@tamerobots.com

This sets the /dotf/ repo to use these special settings in its /dotf/.git/config so that it uses those instead of whats in
your global ~/.gitconfig file.

More here: https://stackoverflow.com/questions/8801729/is-it-possible-to-have-different-git-configuration-for-different-projects

4. That's it.

---------------- Merging conflicts ------------------------------
Remember, a lot of the time, the best place to address a conflict is on github itself.
You can pick a branch and add/remove/edit files on it, then save it to make a new commit.
You can also do side by side comparisons and setup build triggers to external services too.
